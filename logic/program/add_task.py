from logic.time_page import time_setlocal, temp_task
from . import menu
import sqlite3, time
def append_task():
    while True:
        add_task = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É ‚úçÔ∏è: ")
        if add_task.strip():
            con = sqlite3.connect("TodoList.db")
            c = con.cursor()
            now = time.localtime()
            while True:
                temp_time_input = input(
                    "\nüìÜ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –∑–∞–¥–∞—á–∏:\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "  - 3d         ‚Üí 3 –¥–Ω—è\n"
                    "  - 2h 30min   ‚Üí 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç\n"
                    "  - 1m 5d 2h   ‚Üí 1 –º–µ—Å—è—Ü, 5 –¥–Ω–µ–π –∏ 2 —á–∞—Å–∞\n"
                    "  - 0          ‚Üí –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚ôæÔ∏è\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫: ").strip()
                end_timestamp = temp_task.temp_time(temp_time_input)
                if temp_time_input:
                    error = temp_task.temp_time(temp_time_input)
                    if error is -1:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: '1d 3h 20min'")
                    else:
                        time_end_struct = time.localtime(end_timestamp)
                        time_end_str = time_setlocal.format_time(time_end_struct)
                        c.execute("INSERT INTO task (description, status, time, time_end, time_end_str) VALUES (?,?,?,?,? )", (add_task, 
                                                                                                                "active", 
                                                                                                                time_setlocal.format_time(now), 
                                                                                                                temp_task.temp_time(temp_time_input), 
                                                                                                                time_end_str), )
                        con.commit()
                        con.close()
                        print("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üéâ")
                        menu.back_menu()
                        break
        else:
            print("–ü—É—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. üö´")
            continue
def mark_completed():
    con = sqlite3.connect("ToDoList.db")
    c = con.cursor()
    c.execute("SELECT * from task WHERE status = 'active'")
    task = c.fetchall()
    if not task:
        print("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏. üòå")
        menu.back_menu()
        return

    print("\n–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á üìã:")
    for index, value in enumerate(task):
        print(f"{index + 1}. {value[1]}.")

    while True:
        try:
            complet = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ ‚úÖ: "))
            if complet < 1 or complet > len(task):
                print(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(task)}. ‚ö†Ô∏è")
            else:
                complet_id = task[complet - 1][0]
                complet_text = task[complet -1][1]
                time_end_str = time.localtime()
                
                c.execute("UPDATE task SET status = ?, time_end = ?, time_end_str = ? WHERE id = ?", ("completed",temp_task.temp_time("7d"), time_setlocal.format_time(time_end_str), complet_id))
                con.commit()
                print(f"–ó–∞–¥–∞—á–∞ '{complet_text}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üéâ")
                break
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã. üö´")
    con.close()
    menu.back_menu()