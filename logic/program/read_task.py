from . import menu
import sqlite3
from PySide6.QtWidgets import QMessageBox
from PySide6.QtWidgets import QDialog, QListWidget, QVBoxLayout
from design.py_design.read_task_active_window import Ui_Dialog
class ActiveComletedTaskWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_Dialog()#–°–æ–∑–¥–∞—ë–º UI
        self.ui.setupUi(self)#–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º UI –∫ —Ç–µ–∫—É—â–µ–º—É –æ–∫–Ω—É
        self.read_task()# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    def show_completed(self):
        con = sqlite3.connect("ToDoList.db")
        c = con.cursor()
        c.execute("SELECT * from task WHERE status = 'completed'")
        task_completed = c.fetchall()
        if not task_completed:
            print("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π. üí§")
        else:
            print("\n–°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∑–∞ 7 –¥–Ω–µ–πüéä:")
            for index, value in enumerate(task_completed):
                print(f"{index + 1}. {value[1]}\n   ‚îî –í—ã–ª–æ–∂–µ–Ω–æ: {value[3]} | –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {value[5]}")
    def read_task(self):
        con = sqlite3.connect("ToDoList.db")
        c = con.cursor()
        c.execute("SELECT * from task WHERE status = 'active'")
        task = c.fetchall()
        con.commit()
        con.close()
        self.ui.active_task_wid.clear()
        if not task:
            msg = QMessageBox(self)
            msg.setIcon(QMessageBox.Critical)
            msg.setWindowTitle("–û—à–∏–±–∫–∞")
            msg.setText("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò¢")
            msg.setInformativeText("–£ –≤–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            msg.setStandardButtons(QMessageBox.Ok)
            msg.exec()
            return
        else:
            for index, item in enumerate(task):
                deadline = "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ" if item[4] is None else item[5]
                task_text = f"{index+1}) {item[1]} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–æ: {item[3]} | —Å—Ä–æ–∫: {deadline}"
                self.ui.active_task_wid.addItem(task_text)